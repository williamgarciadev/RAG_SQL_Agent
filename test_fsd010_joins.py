#!/usr/bin/env python3
"""
Script de prueba para JOINs autom√°ticos de tabla FSD010
Demuestra diferentes tipos de consultas que activan JOINs inteligentes
"""

import sys
from pathlib import Path

# Agregar el directorio actual al path
sys.path.insert(0, str(Path(__file__).parent))

from bantotal_join_patterns import BantotalJoinAnalyzer

def test_fsd010_joins():
    """Probar diferentes escenarios de JOIN para FSD010."""
    
    print("üéØ PRUEBAS DE JOINs AUTOM√ÅTICOS PARA TABLA FSD010")
    print("=" * 70)
    
    analyzer = BantotalJoinAnalyzer()
    
    # Campos de ejemplo para diferentes tablas
    table_structures = {
        'FSD010': [  # Operaciones Bancarias
            {'name': 'Pgcod', 'type': 'smallint'},
            {'name': 'Aomod', 'type': 'int'},
            {'name': 'Aosuc', 'type': 'int'},
            {'name': 'Aomda', 'type': 'smallint'},
            {'name': 'Aopap', 'type': 'int'},
            {'name': 'Aocta', 'type': 'int'},
            {'name': 'Aooper', 'type': 'int'},
            {'name': 'Aosbop', 'type': 'int'},
        ],
        'FSD601': [  # Operaciones a Plazo
            {'name': 'Pgcod', 'type': 'smallint'},
            {'name': 'Ppmod', 'type': 'int'},
            {'name': 'Ppsuc', 'type': 'int'},
            {'name': 'Ppmda', 'type': 'smallint'},
            {'name': 'Pppap', 'type': 'int'},
            {'name': 'Ppcta', 'type': 'int'},
            {'name': 'Ppoper', 'type': 'int'},
            {'name': 'Ppsbop', 'type': 'int'},
        ],
        'FST001': [  # Sucursales
            {'name': 'Pgcod', 'type': 'smallint'},
            {'name': 'Sucurs', 'type': 'int'},
            {'name': 'Scnom', 'type': 'char'},
            {'name': 'Scnomr', 'type': 'char'},
            {'name': 'Sccall', 'type': 'char'},
        ],
        'FST002': [  # Clientes
            {'name': 'Pgcod', 'type': 'smallint'},
            {'name': 'Clcod', 'type': 'int'},
            {'name': 'Clnom', 'type': 'char'},
            {'name': 'Clape', 'type': 'char'},
            {'name': 'Clfna', 'type': 'date'},
        ]
    }
    
    test_cases = [
        {
            'name': 'FSD010 ‚Üí FSD601',
            'description': 'Operaciones Bancarias con Operaciones a Plazo',
            'table1': 'FSD010',
            'table2': 'FSD601',
            'query_examples': [
                "SELECT operaciones con detalles de plazo",
                "operaciones y plazos relacionados",
                "pagos con informaci√≥n de inversiones"
            ]
        },
        {
            'name': 'FSD010 ‚Üí FST001', 
            'description': 'Operaciones Bancarias con Sucursales',
            'table1': 'FSD010',
            'table2': 'FST001',
            'query_examples': [
                "SELECT operaciones con nombre de sucursal",
                "operaciones por oficina",
                "transacciones con detalles de agencia"
            ]
        },
        {
            'name': 'FSD010 ‚Üí FST002',
            'description': 'Operaciones Bancarias con Clientes', 
            'table1': 'FSD010',
            'table2': 'FST002',
            'query_examples': [
                "SELECT operaciones con datos del cliente",
                "pagos con informaci√≥n personal",
                "transacciones por cliente"
            ]
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}. üîç {test_case['name']}")
        print(f"   üìù {test_case['description']}")
        print("   " + "-" * 50)
        
        table1_fields = table_structures[test_case['table1']]
        table2_fields = table_structures[test_case['table2']]
        
        # Analizar patr√≥n de JOIN
        join_info = analyzer.analyze_join_pattern(
            table1_fields, table2_fields, 
            test_case['table1'], test_case['table2']
        )
        
        # Mostrar resultados
        print(f"   ‚úÖ Puede hacer JOIN: {join_info['can_join']}")
        print(f"   üìä Confianza: {join_info['confidence']:.2f}")
        print(f"   üîó Tipo de JOIN: {join_info['join_type']}")
        print(f"   üéØ Raz√≥n: {join_info['semantic_reason']}")
        
        if join_info['can_join']:
            print(f"   üìã Campos de JOIN:")
            for field in join_info['join_fields'][:3]:  # Primeros 3
                print(f"      ‚Ä¢ {field['field1']} = {field['field2']} ({field['semantic']})")
            
            # Generar SQL
            join_info['table_name'] = f"dbo.{test_case['table2']}"
            sql = analyzer.generate_join_sql(f"dbo.{test_case['table1']}", [join_info])
            
            print(f"\n   üóÑÔ∏è SQL Generado:")
            print("   " + "=" * 45)
            for line in sql.split('\n'):
                print(f"   {line}")
            print("   " + "=" * 45)
        
        print(f"\n   üí° Consultas de ejemplo que activar√≠an este JOIN:")
        for example in test_case['query_examples']:
            print(f"      ‚Ä¢ \"{example}\"")

def test_multiple_joins():
    """Probar JOINs m√∫ltiples con FSD010."""
    
    print(f"\n\nüöÄ PRUEBA DE JOINs M√öLTIPLES CON FSD010")
    print("=" * 70)
    
    analyzer = BantotalJoinAnalyzer()
    
    # Simular query compleja
    complex_query = "SELECT operaciones con sucursal y cliente completo"
    
    print(f"üìù Consulta: \"{complex_query}\"")
    print(f"üéØ Tabla principal: FSD010 (Operaciones Bancarias)")
    print(f"üîó JOINs esperados: FST001 (Sucursales) + FST002 (Clientes)")
    
    # SQL con m√∫ltiples JOINs
    multi_join_sql = """
-- Consulta compleja con m√∫ltiples JOINs autom√°ticos
SELECT TOP 100
    A.Pgcod AS CodigoEmpresa,
    A.Aomod AS Modulo,
    A.Aosuc AS CodigoSucursal,
    A.Aomda AS Moneda,
    A.Aopap AS Papel,
    B.Scnom AS NombreSucursal,
    C.Clnom AS NombreCliente,
    C.Clape AS ApellidoCliente
FROM dbo.FSD010 A
INNER JOIN dbo.FST001 B ON A.Pgcod = B.Pgcod 
                       AND A.Aosuc = B.Sucurs
LEFT JOIN dbo.FST002 C ON A.Pgcod = C.Pgcod
ORDER BY A.Pgcod, A.Aomod;
"""
    
    print(f"\nüóÑÔ∏è SQL con JOINs M√∫ltiples:")
    print("=" * 50)
    print(multi_join_sql)
    print("=" * 50)
    
    print(f"\nüìä Explicaci√≥n de JOINs:")
    print(f"  üî∏ INNER JOIN FST001: Operaciones deben tener sucursal v√°lida")
    print(f"  üî∏ LEFT JOIN FST002:  Operaciones pueden no tener cliente asociado")
    print(f"  üî∏ Campos de relaci√≥n: Pgcod (empresa) + campos espec√≠ficos")

def show_query_keywords():
    """Mostrar palabras clave que activan JOINs autom√°ticos."""
    
    print(f"\n\nüìö PALABRAS CLAVE PARA ACTIVAR JOINs AUTOM√ÅTICOS")
    print("=" * 70)
    
    keywords = {
        'Alto Trigger (JOINs m√∫ltiples)': [
            'completo', 'detalle', 'detallado', 'full', 'con todo',
            'informaci√≥n completa', 'datos completos'
        ],
        'Medio Trigger (JOIN espec√≠fico)': [
            'con', 'junto', 'relacionado', 'vinculado', 'asociado',
            'incluyendo', 'm√°s', 'tambi√©n'
        ],
        'Bajo Trigger (JOIN opcional)': [
            'si existe', 'opcional', 'cuando disponible', 'si tiene'
        ]
    }
    
    for category, words in keywords.items():
        print(f"\nüéØ {category}:")
        for word in words:
            print(f"   ‚Ä¢ \"{word}\"")
    
    print(f"\nüí° Ejemplos de consultas optimizadas:")
    optimized_queries = [
        "SELECT operaciones completas con sucursal y cliente",
        "pagos detallados incluyendo informaci√≥n de agencia", 
        "transacciones con datos completos de personas",
        "operaciones relacionadas con oficinas y abonados",
        "FSD010 con detalles de FST001 y FST002"
    ]
    
    for query in optimized_queries:
        print(f"   ‚úÖ \"{query}\"")

if __name__ == "__main__":
    try:
        test_fsd010_joins()
        test_multiple_joins() 
        show_query_keywords()
        
        print(f"\n\nüéâ PRUEBAS COMPLETADAS EXITOSAMENTE")
        print("=" * 70)
        print(f"‚úÖ Sistema de JOINs autom√°ticos funcionando correctamente")
        print(f"‚úÖ Detecci√≥n de patrones Bantotal por posici√≥n de campos")
        print(f"‚úÖ Generaci√≥n de SQL con relaciones sem√°nticamente correctas")
        
    except Exception as e:
        print(f"\n‚ùå Error en las pruebas: {e}")
        sys.exit(1)