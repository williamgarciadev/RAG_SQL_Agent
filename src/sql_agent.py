# src/sql_agent.py

"""
Agente SQL Especializado
Se enfoca exclusivamente en generar consultas SQL: SELECT, INSERT, UPDATE, DELETE
Optimizado para estructuras de bases de datos bancarios como Bantotal.
"""

from pathlib import Path
from typing import List, Dict, Any, Optional, Tuple
import os
import logging
import json
import time
import re
from datetime import datetime

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

# Importaciones locales
try:
    from indexer import search_index, get_index_info, initialize_chroma_client

    logger.info("‚úÖ Indexer disponible")
except ImportError as e:
    logger.error(f"‚ùå Error importando indexer: {e}")
    exit(1)

try:
    from database_explorer import DatabaseExplorer

    HAS_DB_EXPLORER = True
except ImportError:
    HAS_DB_EXPLORER = False

try:
    import requests

    HAS_REQUESTS = True
except ImportError:
    HAS_REQUESTS = False

try:
    from dotenv import load_dotenv

    load_dotenv()
except ImportError:
    pass

# Configuraci√≥n
OLLAMA_BASE_URL = os.getenv('OLLAMA_BASE_URL', 'http://localhost:11434')
DEFAULT_MODEL = os.getenv('OLLAMA_CHAT_MODEL', 'llama3.2:latest')
TOP_K_RESULTS = int(os.getenv('TOP_K_RESULTS', '3'))
MIN_SIMILARITY = float(os.getenv('MIN_SIMILARITY', '0.2'))


class SQLAgent:
    """Agente especializado exclusivamente en consultas SQL."""

    def __init__(
            self,
            model_name: str = DEFAULT_MODEL,
            ollama_url: str = OLLAMA_BASE_URL
    ):
        """Inicializar agente SQL especializado."""
        self.model_name = model_name
        self.ollama_url = ollama_url

        # Verificar disponibilidad del √≠ndice
        self._check_index_availability()

        # Verificar disponibilidad de Ollama
        self.has_ollama = self._check_ollama_availability()

        # Cargar explorador de BD si est√° disponible
        self.explorer = None
        if HAS_DB_EXPLORER:
            try:
                self.explorer = DatabaseExplorer()
                logger.info("‚úÖ DatabaseExplorer cargado")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Error cargando DatabaseExplorer: {e}")

        # Estad√≠sticas de sesi√≥n
        self.session_stats = {
            'sql_queries_generated': 0,
            'select_queries': 0,
            'insert_queries': 0,
            'update_queries': 0,
            'delete_queries': 0,
            'successful_responses': 0,
            'failed_responses': 0
        }

    def _check_index_availability(self):
        """Verificar que el √≠ndice vectorial est√© disponible."""
        try:
            info = get_index_info()
            if not info.get('exists', False):
                raise Exception("√çndice vectorial no existe")

            doc_count = info.get('live_count', 0)
            logger.info(f"‚úÖ √çndice SQL disponible: {doc_count} documentos")

        except Exception as e:
            logger.error(f"‚ùå Error verificando √≠ndice: {e}")
            logger.error("üí° Ejecuta: python src/indexer.py")
            raise

    def _check_ollama_availability(self):
        """Verificar disponibilidad de Ollama."""
        if not HAS_REQUESTS:
            logger.warning("‚ö†Ô∏è Sin requests - modo solo consulta directa")
            return False

        try:
            response = requests.get(f"{self.ollama_url}/api/tags", timeout=5)
            if response.status_code == 200:
                models = response.json()
                available_models = [m['name'] for m in models.get('models', [])]

                if self.model_name in available_models:
                    logger.info(f"‚úÖ Ollama disponible: {self.model_name}")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è Modelo {self.model_name} no encontrado")
                    return False
            else:
                logger.warning(f"‚ö†Ô∏è Ollama responde con c√≥digo {response.status_code}")
                return False

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Ollama no disponible: {e}")
            return False

    def _detect_sql_operation(self, query: str) -> str:
        """Detectar tipo de operaci√≥n SQL solicitada."""
        query_lower = query.lower()

        # Patrones para detectar operaciones
        if any(word in query_lower for word in ['select', 'consultar', 'obtener', 'buscar', 'mostrar', 'listar']):
            return 'SELECT'
        elif any(word in query_lower for word in ['insert', 'insertar', 'agregar', 'a√±adir', 'crear registro']):
            return 'INSERT'
        elif any(word in query_lower for word in ['update', 'actualizar', 'modificar', 'cambiar', 'editar']):
            return 'UPDATE'
        elif any(word in query_lower for word in ['delete', 'eliminar', 'borrar', 'quitar']):
            return 'DELETE'
        else:
            # Por defecto, asumir SELECT
            return 'SELECT'

    def _extract_table_name(self, query: str) -> Optional[str]:
        """Extraer nombre de tabla de la consulta con mapeo conceptual."""
        query_lower = query.lower()

        # Mapeo conceptual basado en metadatos reales de Bantotal
        CONCEPT_TO_TABLE_MAP = {
            # Operaciones financieras
            'pagos': ['FSD010'],           # FSD010 = Operaciones (incluye pagos)
            'operaciones': ['FSD010'],     # FSD010 = Operaciones bancarias
            'transacciones': ['FSD010'],   # Transacciones = Operaciones
            
            # Operaciones a plazo
            'plazos': ['FSD601'],          # FSD601 = Op. a Plazo
            'depositos': ['FSD601'],       # Dep√≥sitos a plazo
            'inversiones': ['FSD601'],     # Inversiones a plazo
            
            # Clientes y personas
            'clientes': ['FST002', 'FST003'],
            'abonados': ['FST002', 'FST003'],
            'usuarios': ['FST002', 'FST003'],
            'personas': ['FST002', 'FST003', 'FST023'],  # FST023 = G√©nero personas
            
            # Estructura organizacional
            'sucursales': ['FST001'],      # FST001 = Sucursales
            'cuentas': ['FST001', 'FST002'],
            
            # Productos y servicios
            'productos': ['FST023', 'FST024'],
            'servicios': ['FST023'],       # Servicios = productos
            'genero': ['FST023'],          # FST023 = G√©nero de Personas F√≠sicas
        }
        
        # Mapeo por descripci√≥n de tabla (desde enhanced_sql_metadata.json)
        TABLE_DESCRIPTIONS = {
            'FSD010': 'Operaciones',
            'FSD601': 'Op. a Plazo', 
            'FST001': 'Sucursales',
            'FST023': 'G√©nero de Personas F√≠sicas'
        }

        # Patrones Bantotal espec√≠ficos
        bantotal_patterns = [
            r'(FS[TSRDEXAHIMN]\d+)',  # Cualquier tabla Bantotal
            r'(FSD\d+)',              # Datos
            r'(FST\d+)',              # Tablas b√°sicas
            r'(FSR\d+)',              # Relaciones
            r'(FSE\d+)',              # Extensiones
        ]

        # Primero buscar patrones Bantotal espec√≠ficos
        for pattern in bantotal_patterns:
            match = re.search(pattern, query_lower.upper())
            if match:
                return match.group(1)

        # Buscar conceptos conocidos por palabra clave
        for concept, tables in CONCEPT_TO_TABLE_MAP.items():
            if concept in query_lower:
                # Retornar la tabla principal (primera del mapeo)
                return tables[0]
        
        # Buscar por descripci√≥n sem√°ntica de tabla
        for table_code, description in TABLE_DESCRIPTIONS.items():
            if any(word in query_lower for word in description.lower().split()):
                return table_code

        # Patrones comunes para extraer tabla
        table_patterns = [
            r'tabla\s+(\w+)',
            r'table\s+(\w+)',
            r'de\s+(\w+)',
            r'from\s+(\w+)',
            r'into\s+(\w+)',
            r'en\s+(\w+)',
            r'(\w*abonado\w*)',
            r'(\w*client\w*)',
            r'(\w*customer\w*)',
            r'(\w*usuario\w*)',
            r'(\w*cuenta\w*)',
            r'(\w*servicio\w*)'
        ]

        for pattern in table_patterns:
            match = re.search(pattern, query_lower)
            if match:
                extracted = match.group(1)
                # Verificar si es un concepto conocido
                if extracted in CONCEPT_TO_TABLE_MAP:
                    return CONCEPT_TO_TABLE_MAP[extracted][0]
                return extracted

        return None

    def _retrieve_sql_context(self, query: str) -> List[Dict[str, Any]]:
        """Recuperar contexto espec√≠fico para SQL con filtros mejorados."""
        try:
            # Inicializar ChromaDB si es necesario
            initialize_chroma_client()

            # Extraer tabla mencionada
            table_name = self._extract_table_name(query)
            
            # Generar t√©rminos de b√∫squeda mejorados
            search_terms = self._generate_enhanced_search_terms(query, table_name)

            # Filtros espec√≠ficos para metadatos de base de datos
            db_filter = {
                'source_type': 'database'
            }

            # Buscar documentos relevantes con filtros espec√≠ficos
            all_results = []
            for term in search_terms:
                try:
                    # B√∫squeda con filtros de base de datos
                    results = search_index(
                        query=term,
                        top_k=TOP_K_RESULTS,
                        filter_metadata=db_filter
                    )
                    all_results.extend(results)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error buscando con filtros '{term}': {e}")
                    # Intentar sin filtros como fallback
                    try:
                        results = search_index(
                            query=term,
                            top_k=TOP_K_RESULTS,
                            filter_metadata=None
                        )
                        all_results.extend(results)
                    except Exception as e2:
                        logger.warning(f"‚ö†Ô∏è Error b√∫squeda fallback '{term}': {e2}")

            # Si no hay resultados espec√≠ficos, b√∫squeda sem√°ntica amplia
            if not all_results:
                try:
                    semantic_query = self._build_semantic_query(query, table_name)
                    results = search_index(query=semantic_query, top_k=TOP_K_RESULTS * 2)
                    all_results.extend(results)
                except Exception as e:
                    logger.error(f"‚ùå Error en b√∫squeda sem√°ntica: {e}")

            # Filtrar y rankear resultados
            filtered_results = self._filter_and_rank_results(all_results, table_name)

            logger.info(f"üìã Recuperados {len(filtered_results)} documentos SQL relevantes")
            return filtered_results

        except Exception as e:
            logger.error(f"‚ùå Error en recuperaci√≥n SQL: {e}")
            return []

    def _generate_enhanced_search_terms(self, query: str, table_name: Optional[str]) -> List[str]:
        """Generar t√©rminos de b√∫squeda mejorados con metadatos."""
        search_terms = []
        
        if table_name:
            # T√©rminos espec√≠ficos de tabla
            search_terms.extend([
                f"tabla {table_name}",
                f"structure {table_name}",
                f"campos {table_name}",
                f"schema {table_name}",
                f"CREATE TABLE {table_name}",
                table_name  # Nombre directo
            ])
            
            # Agregar descripci√≥n de tabla si existe
            TABLE_DESCRIPTIONS = {
                'FSD010': 'Operaciones',
                'FSD601': 'Op. a Plazo', 
                'FST001': 'Sucursales',
                'FST023': 'G√©nero de Personas F√≠sicas'
            }
            
            if table_name in TABLE_DESCRIPTIONS:
                description = TABLE_DESCRIPTIONS[table_name]
                search_terms.extend([
                    f"{table_name} {description}",
                    f"tabla {description}",
                    description.lower()
                ])
            
            # Si es tabla Bantotal, agregar t√©rminos espec√≠ficos
            if table_name.upper().startswith('FS'):
                # Determinar tipo de tabla por prefijo
                prefix = table_name.upper()[:3]
                table_type_terms = {
                    'FST': 'tablas b√°sicas',
                    'FSD': 'datos operacionales', 
                    'FSR': 'relaciones',
                    'FSE': 'extensiones'
                }
                
                if prefix in table_type_terms:
                    search_terms.append(f"{table_name} {table_type_terms[prefix]}")
                
                search_terms.extend([
                    f"Bantotal {table_name}",
                    f"ERP {table_name}",
                    f"banking {table_name}"
                ])

        # T√©rminos por operaci√≥n
        operation = self._detect_sql_operation(query)
        search_terms.extend([
            f"SQL {operation}",
            f"query {operation}",
            f"statement {operation}"
        ])

        # T√©rminos sem√°nticos del dominio bancario
        banking_terms = [
            "database schema",
            "table structure", 
            "banking database",
            "SQL Server",
            "Bantotal tables",
            "sistema bancario",
            "metadatos enhanced"
        ]
        search_terms.extend(banking_terms)

        return search_terms

    def _build_semantic_query(self, query: str, table_name: Optional[str]) -> str:
        """Construir consulta sem√°ntica enriquecida con metadatos."""
        semantic_parts = []
        
        if table_name:
            semantic_parts.append(f"tabla base de datos {table_name}")
            
            # Agregar descripci√≥n sem√°ntica
            TABLE_DESCRIPTIONS = {
                'FSD010': 'Operaciones',
                'FSD601': 'Op. a Plazo', 
                'FST001': 'Sucursales',
                'FST023': 'G√©nero de Personas F√≠sicas'
            }
            
            if table_name in TABLE_DESCRIPTIONS:
                semantic_parts.append(TABLE_DESCRIPTIONS[table_name])
        
        operation = self._detect_sql_operation(query)
        semantic_parts.append(f"consulta {operation} SQL")
        
        # Clasificar contexto bancario por t√©rminos clave
        banking_contexts = {
            ['pago', 'pagos', 'cobro']: 'operaciones bancarias pagos',
            ['cliente', 'abonado', 'usuario']: 'clientes personas', 
            ['cuenta', 'servicio', 'producto']: 'productos servicios',
            ['sucursal', 'oficina']: 'estructura organizacional',
            ['plazo', 'deposito', 'inversion']: 'operaciones plazo financiero',
            ['operacion', 'transaccion']: 'operaciones transaccionales'
        }
        
        query_lower = query.lower()
        for terms, context in banking_contexts.items():
            if any(term in query_lower for term in terms):
                semantic_parts.append(context)
                break
        
        # Agregar metadatos enriquecidos
        semantic_parts.extend([
            "estructura esquema metadatos",
            "enhanced metadata Bantotal",
            "foreign keys constraints"
        ])
        
        return " ".join(semantic_parts)

    def _filter_and_rank_results(self, results: List[Dict[str, Any]], table_name: Optional[str]) -> List[Dict[str, Any]]:
        """Filtrar y rankear resultados por relevancia."""
        if not results:
            return []

        # Filtrar por similitud m√≠nima
        filtered = [r for r in results if r.get('similarity', 0) >= MIN_SIMILARITY]
        
        # Deduplicar por ID
        unique_results = []
        seen_ids = set()
        for result in filtered:
            result_id = result.get('id')
            if result_id not in seen_ids:
                seen_ids.add(result_id)
                unique_results.append(result)

        # Scoring mejorado por relevancia
        scored_results = []
        for result in unique_results:
            score = result.get('similarity', 0)
            metadata = result.get('metadata', {})
            
            # Boost para fuentes de base de datos
            if metadata.get('source_type') in ['database', 'database_table', 'database_schema']:
                score *= 1.5
            
            # Boost para tabla espec√≠fica
            if table_name and table_name.lower() in result.get('text', '').lower():
                score *= 1.3
            
            # Boost para contenido Bantotal
            if any(term in result.get('text', '').upper() for term in ['FST', 'FSD', 'FSR', 'BANTOTAL']):
                score *= 1.2
            
            result['relevance_score'] = score
            scored_results.append(result)

        # Ordenar por score de relevancia
        scored_results.sort(key=lambda x: x.get('relevance_score', 0), reverse=True)
        
        return scored_results[:TOP_K_RESULTS]

    def _get_table_structure_from_explorer(self, table_name: str) -> Optional[Dict]:
        """Obtener estructura de tabla usando DatabaseExplorer."""
        if not self.explorer:
            return None

        try:
            # Buscar tabla por nombre
            search_results = self.explorer.search_tables(table_name, limit=5)

            if not search_results:
                return None

            # Tomar la m√°s relevante
            best_match = search_results[0]

            # Obtener estructura completa
            structure = self.explorer.get_table_structure(
                best_match['table_name'],
                best_match['schema_name']
            )

            return structure

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error obteniendo estructura de {table_name}: {e}")
            return None

    def _build_sql_context(self, documents: List[Dict[str, Any]], query: str, operation: str) -> str:
        """Construir contexto especializado para generaci√≥n SQL."""
        if not documents:
            return "No se encontraron estructuras de tablas relevantes."

        context_parts = [
            f"=== CONTEXTO PARA GENERACI√ìN DE {operation} ===\n"
        ]

        # Extraer tabla objetivo
        target_table = self._extract_table_name(query)
        
        # Metadatos de enhanced_sql_metadata.json
        enhanced_metadata = self._get_enhanced_metadata(target_table)
        
        if target_table:
            context_parts.append(f"\nüéØ TABLA OBJETIVO: {target_table}")
            
            # Informaci√≥n enriquecida si est√° disponible
            if enhanced_metadata:
                context_parts.append(f"üìù DESCRIPCI√ìN: {enhanced_metadata.get('description', 'N/A')}")
                context_parts.append(f"üìä TOTAL CAMPOS: {enhanced_metadata.get('column_count', 'N/A')}")
                context_parts.append(f"üîë FOREIGN KEYS: {enhanced_metadata.get('foreign_keys_count', 0)}")
                context_parts.append(f"üìà √çNDICES: {enhanced_metadata.get('indexes_count', 0)}")
                
                # Campos con descripciones mejoradas
                if enhanced_metadata.get('sample_fields'):
                    context_parts.append("\nüìä CAMPOS PRINCIPALES CON DESCRIPCIONES:")
                    for field in enhanced_metadata['sample_fields'][:10]:  # Primeros 10
                        pk_marker = " üîë" if field.get('is_primary_key') == 'YES' else ""
                        description = field.get('description', '')
                        desc_text = f" - {description}" if description else ""
                        context_parts.append(
                            f"  ‚Ä¢ {field['name']}: {field['full_type']}{pk_marker}{desc_text}"
                        )
            
            # Estructura desde DatabaseExplorer como fallback
            if self.explorer:
                structure = self._get_table_structure_from_explorer(target_table)
                if structure and not enhanced_metadata:
                    context_parts.append(f"\nüè¢ ESTRUCTURA DESDE BD: {structure['full_name']}")
                    context_parts.append(f"Total campos: {structure['column_count']}")
                    
                    # Claves primarias
                    if structure['primary_keys']:
                        context_parts.append(f"\nüîë CLAVES PRIMARIAS: {', '.join(structure['primary_keys'])}")
                    
                    # Claves for√°neas
                    foreign_keys = structure.get('foreign_keys', [])
                    if foreign_keys:
                        context_parts.append("\nüîó CLAVES FOR√ÅNEAS:")
                        for fk in foreign_keys[:5]:  # Solo primeras 5
                            context_parts.append(
                                f"  ‚Ä¢ {fk['column_name']} ‚Üí {fk['referenced_table']}.{fk['referenced_column']}"
                            )
            
            context_parts.append("\n" + "=" * 60 + "\n")

        # Contexto de documentos relevantes (m√°s conciso)
        context_parts.append("üìö DOCUMENTOS DE REFERENCIA:")
        for i, doc in enumerate(documents[:3], 1):  # Solo primeros 3
            metadata = doc.get('metadata', {})
            source = metadata.get('source', 'Fuente desconocida')
            similarity = doc.get('similarity', 0)
            source_type = metadata.get('source_type', 'unknown')
            
            # Extraer fragmento relevante
            text_content = doc.get('text', '')[:400]
            
            context_parts.append(f"\n{i}. üìÑ {Path(source).name if 'file' in str(source) else source}")
            context_parts.append(f"   Tipo: {source_type} | Relevancia: {similarity:.3f}")
            context_parts.append(f"   Contenido: {text_content}...")

        return "\n".join(context_parts)
    
    def _get_enhanced_metadata(self, table_name: Optional[str]) -> Optional[Dict[str, Any]]:
        """Obtener metadatos enriquecidos de enhanced_sql_metadata.json."""
        if not table_name:
            return None
            
        # Metadatos est√°ticos desde el JSON (podr√≠a cargarse din√°micamente)
        enhanced_tables = {
            'FST001': {
                'description': 'Sucursales',
                'column_count': 12,
                'foreign_keys_count': 2,
                'indexes_count': 2,
                'sample_fields': [
                    {'name': 'Pgcod', 'full_type': 'smallint', 'is_primary_key': 'YES', 'description': 'C√≥digo Empresa'},
                    {'name': 'Sucurs', 'full_type': 'int', 'is_primary_key': 'YES', 'description': 'C√≥digo Sucursal'},
                    {'name': 'Scnom', 'full_type': 'char(30)', 'is_primary_key': 'NO', 'description': 'Nombre Sucursal'},
                ]
            },
            'FST023': {
                'description': 'G√©nero de Personas F√≠sicas',
                'column_count': 4,
                'foreign_keys_count': 0, 
                'indexes_count': 1,
                'sample_fields': [
                    {'name': 'FST023Cod', 'full_type': 'char(1)', 'is_primary_key': 'YES', 'description': 'C√≥digo de Identidad de G√©nero'},
                    {'name': 'FST023Dsc', 'full_type': 'char(20)', 'is_primary_key': 'NO', 'description': 'Descripci√≥n de Identidad de G√©nero'},
                ]
            },
            'FSD010': {
                'description': 'Operaciones Bancarias',
                'column_count': 45,
                'foreign_keys_count': 13,
                'indexes_count': 10,
                'sample_fields': [
                    {'name': 'Pgcod', 'full_type': 'smallint', 'is_primary_key': 'YES', 'description': 'C√≥digo Empresa'},
                    {'name': 'Aomod', 'full_type': 'int', 'is_primary_key': 'YES', 'description': 'M√≥dulo'},
                    {'name': 'Aosuc', 'full_type': 'int', 'is_primary_key': 'YES', 'description': 'Sucursal'},
                    {'name': 'Aomda', 'full_type': 'smallint', 'is_primary_key': 'YES', 'description': 'Moneda'},
                    {'name': 'Aopap', 'full_type': 'int', 'is_primary_key': 'YES', 'description': 'Papel'},
                ]
            },
            'FSD601': {
                'description': 'Operaciones a Plazo',
                'column_count': 31,
                'foreign_keys_count': 11,
                'indexes_count': 10,
                'sample_fields': [
                    {'name': 'Pgcod', 'full_type': 'smallint', 'is_primary_key': 'YES', 'description': 'C√≥digo Empresa'},
                    {'name': 'Ppmod', 'full_type': 'int', 'is_primary_key': 'YES', 'description': 'M√≥dulo'},
                    {'name': 'Ppsuc', 'full_type': 'int', 'is_primary_key': 'YES', 'description': 'Sucursal'},
                    {'name': 'Ppmda', 'full_type': 'smallint', 'is_primary_key': 'YES', 'description': 'Moneda'},
                    {'name': 'Pppap', 'full_type': 'int', 'is_primary_key': 'YES', 'description': 'Papel'},
                ]
            }
        }
        
        return enhanced_tables.get(table_name.upper())

    def _generate_sql_prompt(self, query: str, context: str, operation: str) -> str:
        """Generar prompt especializado para SQL."""

        base_prompt = f"""Eres un experto en SQL Server especializado en sistemas bancarios como Bantotal.

Tu tarea es generar consultas {operation} precisas y optimizadas bas√°ndote √∫nicamente en la informaci√≥n de estructuras de tablas proporcionada.

REGLAS ESTRICTAS:
1. SOLO generar SQL v√°lido para SQL Server
2. Usar √∫nicamente tablas y campos que aparezcan en el contexto
3. Incluir comentarios explicativos en espa√±ol
4. Optimizar para rendimiento (usar √≠ndices cuando sea posible)
5. Validar tipos de datos y restricciones
6. Para campos de fecha, usar formato 'YYYY-MM-DD' o 'YYYY-MM-DD HH:MM:SS'
7. Usar nombres de tabla completos (esquema.tabla) cuando sea posible

FORMATO DE RESPUESTA:
- Comenzar con comentarios explicando la consulta
- Mostrar el SQL optimizado
- Agregar ejemplos de uso si es relevante
- Incluir consideraciones de rendimiento

CONTEXTO DE TABLAS DISPONIBLES:
{context}

CONSULTA DEL USUARIO: {query}

GENERAR CONSULTA {operation}:"""

        return base_prompt

    def generate_sql_query(self, user_query: str) -> Dict[str, Any]:
        """Generar consulta SQL basada en la solicitud del usuario."""
        start_time = time.time()
        self.session_stats['sql_queries_generated'] += 1

        logger.info(f"üîç Generando SQL para: '{user_query}'")

        # Detectar tipo de operaci√≥n
        operation = self._detect_sql_operation(user_query)
        logger.info(f"üéØ Operaci√≥n detectada: {operation}")

        # Actualizar estad√≠sticas por operaci√≥n
        stat_key = f"{operation.lower()}_queries"
        if stat_key in self.session_stats:
            self.session_stats[stat_key] += 1

        # Recuperar contexto de estructuras de tablas
        documents = self._retrieve_sql_context(user_query)

        if not documents:
            return {
                'query': user_query,
                'sql_generated': None,
                'operation': operation,
                'error': "No se encontraron estructuras de tablas relevantes",
                'suggestions': [
                    "Especifica el nombre de la tabla (ej: 'SELECT de tabla abonados')",
                    "Verifica que la tabla est√© indexada en el sistema",
                    "Usa t√©rminos m√°s espec√≠ficos (ej: 'consultar clientes activos')"
                ],
                'metadata': {
                    'success': False,
                    'total_time': time.time() - start_time
                }
            }

        # Construir contexto especializado
        context = self._build_sql_context(documents, user_query, operation)

        # Generar SQL
        if self.has_ollama:
            sql_result = self._generate_sql_with_ai(user_query, context, operation)
        else:
            sql_result = self._generate_sql_fallback(user_query, context, operation)

        # Resultado final
        total_time = time.time() - start_time

        result = {
            'query': user_query,
            'sql_generated': sql_result['sql'],
            'operation': operation,
            'explanation': sql_result.get('explanation', ''),
            'warnings': sql_result.get('warnings', []),
            'examples': sql_result.get('examples', []),
            'sources': [
                {
                    'source': doc['metadata'].get('source', ''),
                    'type': doc['metadata'].get('source_type', ''),
                    'similarity': doc.get('similarity', 0)
                }
                for doc in documents
            ],
            'metadata': {
                'operation_type': operation,
                'documents_used': len(documents),
                'total_time': total_time,
                'has_ai': self.has_ollama,
                'timestamp': datetime.now().isoformat(),
                'success': sql_result['sql'] is not None
            }
        }

        if result['metadata']['success']:
            self.session_stats['successful_responses'] += 1
        else:
            self.session_stats['failed_responses'] += 1

        logger.info(f"‚úÖ SQL {operation} generado ({total_time:.2f}s)")
        return result

    def _generate_sql_with_ai(self, query: str, context: str, operation: str) -> Dict[str, Any]:
        """Generar SQL usando IA (Ollama)."""
        try:
            prompt = self._generate_sql_prompt(query, context, operation)

            response = requests.post(
                f"{self.ollama_url}/api/generate",
                json={
                    "model": self.model_name,
                    "prompt": prompt,
                    "stream": False,
                    "options": {
                        "temperature": 0.1,  # Muy bajo para SQL preciso
                        "top_p": 0.9,
                        "max_tokens": 1500
                    }
                },
                timeout=60
            )

            if response.status_code == 200:
                result = response.json()
                sql_text = result.get('response', '').strip()

                # Extraer SQL del texto generado
                sql_code = self._extract_sql_from_response(sql_text)
                explanation = self._extract_explanation_from_response(sql_text)

                return {
                    'sql': sql_code,
                    'explanation': explanation,
                    'warnings': self._validate_sql(sql_code) if sql_code else [],
                    'examples': []
                }
            else:
                logger.error(f"‚ùå Error Ollama: {response.status_code}")
                return self._generate_sql_fallback(query, context, operation)

        except Exception as e:
            logger.error(f"‚ùå Error generando SQL con IA: {e}")
            return self._generate_sql_fallback(query, context, operation)

    def _generate_sql_fallback(self, query: str, context: str, operation: str) -> Dict[str, Any]:
        """Generar SQL sin IA usando templates."""

        # Extraer tabla objetivo
        table_name = self._extract_table_name(query)

        if not table_name:
            return {
                'sql': None,
                'explanation': 'No se pudo identificar la tabla objetivo',
                'warnings': ['Especifica el nombre de la tabla en tu consulta'],
                'examples': []
            }

        # Obtener estructura de tabla si est√° disponible
        structure = None
        if self.explorer:
            structure = self._get_table_structure_from_explorer(table_name)

        if not structure:
            # Template b√°sico sin estructura
            if operation == 'SELECT':
                sql = f"""-- Consulta SELECT b√°sica para tabla {table_name}
-- NOTA: Ajustar campos seg√∫n estructura real de la tabla
SELECT TOP 100 *
FROM dbo.{table_name}
ORDER BY 1;

-- Ejemplo con filtros comunes:
-- WHERE campo_estado = 'ACTIVO'
-- WHERE fecha_creacion >= '2024-01-01'"""

            elif operation == 'INSERT':
                sql = f"""-- Plantilla INSERT para tabla {table_name}
-- NOTA: Ajustar campos y valores seg√∫n estructura real
INSERT INTO dbo.{table_name} (
    campo1,
    campo2,
    campo3
) VALUES (
    'valor1',
    'valor2',
    'valor3'
);"""

            elif operation == 'UPDATE':
                sql = f"""-- Plantilla UPDATE para tabla {table_name}
-- NOTA: Ajustar campos y condiciones seg√∫n estructura real
UPDATE dbo.{table_name}
SET campo1 = 'nuevo_valor',
    campo2 = 'otro_valor',
    fecha_modificacion = GETDATE()
WHERE id = 123;  -- Ajustar condici√≥n WHERE"""

            else:  # DELETE
                sql = f"""-- Plantilla DELETE para tabla {table_name}
-- CUIDADO: Siempre usar WHERE para evitar borrar todos los registros
DELETE FROM dbo.{table_name}
WHERE id = 123;  -- Ajustar condici√≥n WHERE

-- Para borrado l√≥gico (recomendado):
-- UPDATE dbo.{table_name} SET estado = 'INACTIVO' WHERE id = 123;"""

            return {
                'sql': sql,
                'explanation': f'Plantilla {operation} b√°sica para {table_name}. Requiere ajustes seg√∫n estructura real.',
                'warnings': ['No se encontr√≥ estructura de tabla', 'Revisar campos y tipos antes de ejecutar'],
                'examples': []
            }

        else:
            # Generar SQL con estructura conocida
            return self._generate_sql_with_structure(query, structure, operation)

    def _generate_sql_with_structure(self, query: str, structure: Dict, operation: str) -> Dict[str, Any]:
        """Generar SQL conociendo la estructura exacta de la tabla."""

        full_table_name = structure['full_name']
        columns = structure['columns']
        primary_keys = structure.get('primary_keys', [])

        if operation == 'SELECT':
            # Determinar si incluir JOINs
            query_lower = query.lower()
            include_joins = any(word in query_lower for word in ['join', 'relacion', 'relacionar', 'con', 'detalle'])
            join_type = 'INNER' if 'inner' in query_lower else 'LEFT'
            
            # Usar el generador mejorado del DatabaseExplorer
            if hasattr(self, 'db_explorer') and self.db_explorer:
                table_name = structure['table_name']
                schema = structure.get('schema', 'dbo')
                
                # Generar query con JOINs autom√°ticos
                sql = self.db_explorer.generate_select_query(
                    table_name=table_name,
                    schema=schema,
                    limit=100,
                    include_joins=include_joins,
                    join_type=join_type
                )
            else:
                # Fallback al m√©todo anterior si no hay DatabaseExplorer
                if 'todos los campos' in query_lower or 'all fields' in query_lower or '*' in query_lower:
                    # Mostrar todos los campos
                    field_list = [f"    {col['name']}" for col in columns]
                    fields_joined = ',\n'.join(field_list)
                    sql = f"""-- Consulta SELECT completa para {full_table_name}
-- Total de campos: {len(columns)}
-- Generado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

SELECT TOP 100
{fields_joined}
FROM {full_table_name}"""
                else:
                    # Mostrar campos principales (primeros 10)
                    main_fields = [f"    {col['name']}" for col in columns[:10]]
                    if len(columns) > 10:
                        main_fields.append(f"    -- ... y {len(columns) - 10} campos m√°s")

                    fields_to_join = main_fields[:-1] if len(columns) > 10 else main_fields
                    main_fields_joined = ',\n'.join(fields_to_join)

                    sql = f"""-- Consulta SELECT principal para {full_table_name}
-- Mostrando primeros 10 campos de {len(columns)} totales

SELECT TOP 100
{main_fields_joined}
FROM {full_table_name}"""

                # Agregar ORDER BY usando clave primaria si existe
                if primary_keys:
                    sql += f"\nORDER BY {', '.join(primary_keys)};"
                else:
                    sql += f"\nORDER BY {columns[0]['name']};"

                # Agregar ejemplos de filtros
                sql += "\n\n-- Ejemplos de filtros comunes:"

                # Buscar campos t√≠picos para filtros
                for col in columns[:5]:
                    col_name = col['name']
                    data_type = col['data_type'].lower()

                    if 'estado' in col_name.lower():
                        sql += f"\n-- WHERE {col_name} = 'ACTIVO'"
                    elif 'fecha' in col_name.lower() or 'date' in data_type:
                        sql += f"\n-- WHERE {col_name} >= '2024-01-01'"
                    elif any(word in col_name.lower() for word in ['nombre', 'descripcion', 'name']):
                        sql += f"\n-- WHERE {col_name} LIKE '%texto%'"
                    elif any(word in data_type for word in ['int', 'numeric', 'decimal']):
                        sql += f"\n-- WHERE {col_name} = 123"

        elif operation == 'INSERT':
            # Campos no nulos y sin default
            required_fields = [col for col in columns if
                               col['is_nullable'] == 'NO' and not col.get('default_value') and col['is_primary_key'] != 'YES']
            optional_fields = [col for col in columns if col['is_nullable'] == 'YES' or col.get('default_value')]

            field_names = [col['name'] for col in required_fields]
            field_values = []

            for col in required_fields:
                data_type = col['data_type'].lower()
                if any(dt in data_type for dt in ['varchar', 'char', 'text', 'nvarchar']):
                    field_values.append("'valor_texto'")
                elif any(dt in data_type for dt in ['int', 'bigint']):
                    field_values.append("123")
                elif any(dt in data_type for dt in ['decimal', 'numeric', 'money']):
                    field_values.append("100.00")
                elif any(dt in data_type for dt in ['date', 'datetime']):
                    field_values.append("'2024-01-01'")
                else:
                    field_values.append("'valor'")

            field_names_joined = ',\n    '.join(field_names)
            field_values_joined = ',\n    '.join(field_values)

            sql = f"""-- INSERT para {full_table_name}
-- Campos obligatorios: {len(required_fields)}
-- Campos opcionales disponibles: {len(optional_fields)}

INSERT INTO {full_table_name} (
    {field_names_joined}
) VALUES (
    {field_values_joined}
);"""

            if optional_fields:
                sql += f"\n\n-- Campos opcionales disponibles:"
                for col in optional_fields[:5]:
                    sql += f"\n-- {col['name']}: {col['full_type']}"

        elif operation == 'UPDATE':
            # Usar campos editables (no claves primarias)
            editable_fields = [col for col in columns if col['is_primary_key'] != 'YES'][:5]

            set_clauses = []
            for col in editable_fields:
                data_type = col['data_type'].lower()
                if any(dt in data_type for dt in ['varchar', 'char', 'text']):
                    set_clauses.append(f"    {col['name']} = 'nuevo_valor'")
                elif any(dt in data_type for dt in ['date', 'datetime']):
                    set_clauses.append(f"    {col['name']} = GETDATE()")
                else:
                    set_clauses.append(f"    {col['name']} = 'nuevo_valor'")

            where_clause = primary_keys[0] if primary_keys else columns[0]['name']
            set_clauses_joined = ',\n'.join(set_clauses)

            sql = f"""-- UPDATE para {full_table_name}
-- Actualizar registros espec√≠ficos

UPDATE {full_table_name}
SET
{set_clauses_joined},
    fecha_modificacion = GETDATE()  -- Si existe este campo
WHERE {where_clause} = 123;  -- Ajustar valor seg√∫n necesidad

-- IMPORTANTE: Siempre usar WHERE para evitar actualizar todos los registros"""

        else:  # DELETE
            where_clause = primary_keys[0] if primary_keys else columns[0]['name']

            sql = f"""-- DELETE para {full_table_name}
-- CUIDADO: Operaci√≥n irreversible

-- Borrado espec√≠fico:
DELETE FROM {full_table_name}
WHERE {where_clause} = 123;  -- Ajustar valor

-- Alternativa recomendada - Borrado l√≥gico (si existe campo estado):
-- UPDATE {full_table_name} 
-- SET estado = 'INACTIVO', fecha_baja = GETDATE()
-- WHERE {where_clause} = 123;

-- NUNCA ejecutar sin WHERE:
-- DELETE FROM {full_table_name};  -- ¬°ESTO BORRA TODO!"""

        return {
            'sql': sql,
            'explanation': f'Consulta {operation} generada para {full_table_name} con {len(columns)} campos disponibles.',
            'warnings': self._validate_sql(sql),
            'examples': []
        }

    def _extract_sql_from_response(self, response_text: str) -> Optional[str]:
        """Extraer c√≥digo SQL del texto de respuesta."""
        # Buscar bloques de c√≥digo SQL
        sql_patterns = [
            r'```sql\n(.*?)\n```',
            r'```\n(.*?)\n```',
            r'SELECT.*?;',
            r'INSERT.*?;',
            r'UPDATE.*?;',
            r'DELETE.*?;'
        ]

        for pattern in sql_patterns:
            matches = re.findall(pattern, response_text, re.DOTALL | re.IGNORECASE)
            if matches:
                return matches[0].strip()

        # Si no encuentra patrones, buscar l√≠neas que parezcan SQL
        lines = response_text.split('\n')
        sql_lines = []
        in_sql = False

        for line in lines:
            line_clean = line.strip()
            if any(word in line_clean.upper() for word in ['SELECT', 'INSERT', 'UPDATE', 'DELETE', 'FROM', 'WHERE']):
                in_sql = True

            if in_sql:
                sql_lines.append(line)
                if line_clean.endswith(';'):
                    break

        return '\n'.join(sql_lines) if sql_lines else None

    def _extract_explanation_from_response(self, response_text: str) -> str:
        """Extraer explicaci√≥n del texto de respuesta."""
        # Buscar texto antes del SQL
        lines = response_text.split('\n')
        explanation_lines = []

        for line in lines:
            if any(word in line.upper() for word in ['SELECT', 'INSERT', 'UPDATE', 'DELETE']):
                break
            if line.strip() and not line.startswith('```'):
                explanation_lines.append(line.strip())

        return ' '.join(explanation_lines) if explanation_lines else 'Consulta SQL generada.'

    def _validate_sql(self, sql: str) -> List[str]:
        """Validar SQL y retornar advertencias."""
        warnings = []

        if not sql:
            return ['No se gener√≥ c√≥digo SQL']

        sql_upper = sql.upper()

        # Validaciones b√°sicas
        if 'DELETE' in sql_upper and 'WHERE' not in sql_upper:
            warnings.append('‚ö†Ô∏è DELETE sin WHERE puede borrar todos los registros')

        if 'UPDATE' in sql_upper and 'WHERE' not in sql_upper:
            warnings.append('‚ö†Ô∏è UPDATE sin WHERE puede modificar todos los registros')

        if 'SELECT *' in sql_upper and 'TOP' not in sql_upper and 'LIMIT' not in sql_upper:
            warnings.append('üí° Considera usar TOP N para limitar resultados')

        if 'DROP' in sql_upper or 'TRUNCATE' in sql_upper:
            warnings.append('üö® Operaci√≥n destructiva detectada')

        return warnings

    def get_session_stats(self) -> Dict[str, Any]:
        """Obtener estad√≠sticas de la sesi√≥n SQL."""
        total_queries = self.session_stats['sql_queries_generated']

        return {
            **self.session_stats,
            'success_rate': (
                    self.session_stats['successful_responses'] / max(1, total_queries)
            ),
            'most_used_operation': max(
                ['select', 'insert', 'update', 'delete'],
                key=lambda op: self.session_stats.get(f'{op}_queries', 0)
            )
        }


def main():
    """Funci√≥n principal para pruebas desde l√≠nea de comandos."""
    import sys

    if len(sys.argv) < 2:
        print("""
üóÑÔ∏è Agente SQL Especializado - Consultas Bancarias

Uso:
  python src/sql_agent.py "tu consulta SQL aqu√≠"

Ejemplos para SELECT:
  python src/sql_agent.py "SELECT de tabla abonados con todos los campos"
  python src/sql_agent.py "consultar clientes activos"
  python src/sql_agent.py "mostrar servicios de un cliente"

Ejemplos para INSERT:
  python src/sql_agent.py "INSERT nuevo abonado"
  python src/sql_agent.py "agregar cliente con datos"

Ejemplos para UPDATE:
  python src/sql_agent.py "UPDATE datos del abonado"
  python src/sql_agent.py "actualizar estado del cliente"

Ejemplos para DELETE:
  python src/sql_agent.py "DELETE abonado inactivo"
  python src/sql_agent.py "eliminar servicio cancelado"

Capacidades:
  ‚úÖ Genera SQL optimizado para SQL Server
  ‚úÖ Usa estructura real de las tablas
  ‚úÖ Incluye validaciones y advertencias
  ‚úÖ Ejemplos espec√≠ficos para bancarios
  ‚úÖ Comentarios explicativos en espa√±ol
""")
        return

    query = ' '.join(sys.argv[1:])

    try:
        # Crear agente SQL
        agent = SQLAgent()

        # Procesar consulta
        result = agent.generate_sql_query(query)

        # Mostrar resultado
        print(f"\nüîç CONSULTA: {result['query']}")
        print(f"üéØ OPERACI√ìN: {result['operation']}")

        if result['sql_generated']:
            print(f"\nüóÑÔ∏è SQL GENERADO:")
            print("=" * 80)
            print(result['sql_generated'])
            print("=" * 80)

            if result.get('explanation'):
                print(f"\nüí° EXPLICACI√ìN:")
                print(result['explanation'])

            if result.get('warnings'):
                print(f"\n‚ö†Ô∏è ADVERTENCIAS:")
                for warning in result['warnings']:
                    print(f"   ‚Ä¢ {warning}")
        else:
            print(f"\n‚ùå ERROR: {result.get('error', 'No se pudo generar SQL')}")

            if result.get('suggestions'):
                print(f"\nüí° SUGERENCIAS:")
                for suggestion in result['suggestions']:
                    print(f"   ‚Ä¢ {suggestion}")

        if result.get('sources'):
            print(f"\nüìö FUENTES CONSULTADAS:")
            for i, source in enumerate(result['sources'], 1):
                source_name = Path(source['source']).name if source.get('source') else 'N/A'
                print(f"   {i}. {source_name} (similitud: {source.get('similarity', 0):.3f})")

        # Estad√≠sticas
        metadata = result['metadata']
        print(f"\nüìä ESTAD√çSTICAS:")
        print(f"   Tiempo: {metadata['total_time']:.2f}s")
        print(f"   Documentos usados: {metadata['documents_used']}")
        print(f"   IA disponible: {'S√≠' if metadata['has_ai'] else 'No'}")

        # Estad√≠sticas de sesi√≥n
        stats = agent.get_session_stats()
        print(f"   Consultas en sesi√≥n: {stats['sql_queries_generated']}")
        print(f"   Operaci√≥n m√°s usada: {stats['most_used_operation'].upper()}")

    except Exception as e:
        logger.error(f"‚ùå Error: {e}")
        print(f"\n‚ùå Error procesando consulta: {e}")


if __name__ == '__main__':
    main()