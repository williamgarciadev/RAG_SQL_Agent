# src/docs_agent.py

"""
Agente de Documentos Especializado
Se enfoca exclusivamente en consultas sobre documentaci√≥n t√©cnica:
- Manuales de GeneXus
- Documentaci√≥n de Bantotal
- Gu√≠as t√©cnicas y procedimientos
- Best practices y configuraciones
"""

from pathlib import Path
from typing import List, Dict, Any, Optional, Tuple
import os
import logging
import json
import time
import re
from datetime import datetime

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

# Importaciones locales
try:
    from indexer import search_index, get_index_info, initialize_chroma_client

    logger.info("‚úÖ Indexer disponible")
except ImportError as e:
    logger.error(f"‚ùå Error importando indexer: {e}")
    exit(1)

try:
    import requests

    HAS_REQUESTS = True
except ImportError:
    HAS_REQUESTS = False

try:
    from dotenv import load_dotenv

    load_dotenv()
except ImportError:
    pass

# Configuraci√≥n
OLLAMA_BASE_URL = os.getenv('OLLAMA_BASE_URL', 'http://localhost:11434')
DEFAULT_MODEL = os.getenv('OLLAMA_CHAT_MODEL', 'llama3.2:latest')
TOP_K_RESULTS = int(os.getenv('TOP_K_RESULTS', '5'))
MIN_SIMILARITY = float(os.getenv('MIN_SIMILARITY', '0.1'))


class DocsAgent:
    """Agente especializado exclusivamente en documentaci√≥n t√©cnica."""

    def __init__(
            self,
            model_name: str = DEFAULT_MODEL,
            ollama_url: str = OLLAMA_BASE_URL
    ):
        """Inicializar agente de documentos especializado."""
        self.model_name = model_name
        self.ollama_url = ollama_url

        # Verificar disponibilidad del √≠ndice
        self._check_index_availability()

        # Verificar disponibilidad de Ollama
        self.has_ollama = self._check_ollama_availability()

        # Estad√≠sticas de sesi√≥n
        self.session_stats = {
            'doc_queries_processed': 0,
            'genexus_queries': 0,
            'bantotal_queries': 0,
            'technical_queries': 0,
            'procedure_queries': 0,
            'successful_responses': 0,
            'failed_responses': 0
        }

        # Tipos de documentaci√≥n reconocidos
        self.doc_types = {
            'genexus': ['genexus', 'gx', 'for each', 'transaction', 'web panel', 'procedure'],
            'bantotal': ['bantotal', 'banco', 'financiero', 'pr√©stamo', 'cuenta', 'cliente bancario'],
            'technical': ['instalaci√≥n', 'configuraci√≥n', 'setup', 'deployment', 'architecture'],
            'procedure': ['procedimiento', 'pasos', 'tutorial', 'gu√≠a', 'manual', 'how to']
        }

    def _check_index_availability(self):
        """Verificar que el √≠ndice vectorial est√© disponible."""
        try:
            info = get_index_info()
            if not info.get('exists', False):
                raise Exception("√çndice vectorial no existe")

            doc_count = info.get('live_count', 0)
            logger.info(f"‚úÖ √çndice documentos disponible: {doc_count} documentos")

        except Exception as e:
            logger.error(f"‚ùå Error verificando √≠ndice: {e}")
            logger.error("üí° Ejecuta: python src/indexer.py")
            raise

    def _check_ollama_availability(self):
        """Verificar disponibilidad de Ollama."""
        if not HAS_REQUESTS:
            logger.warning("‚ö†Ô∏è Sin requests - modo solo b√∫squeda directa")
            return False

        try:
            response = requests.get(f"{self.ollama_url}/api/tags", timeout=5)
            if response.status_code == 200:
                models = response.json()
                available_models = [m['name'] for m in models.get('models', [])]

                if self.model_name in available_models:
                    logger.info(f"‚úÖ Ollama disponible: {self.model_name}")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è Modelo {self.model_name} no encontrado")
                    return False
            else:
                logger.warning(f"‚ö†Ô∏è Ollama responde con c√≥digo {response.status_code}")
                return False

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Ollama no disponible: {e}")
            return False

    def _detect_documentation_type(self, query: str) -> str:
        """Detectar tipo de documentaci√≥n solicitada."""
        query_lower = query.lower()

        # Contar coincidencias por tipo
        type_scores = {}
        for doc_type, keywords in self.doc_types.items():
            score = sum(1 for keyword in keywords if keyword in query_lower)
            if score > 0:
                type_scores[doc_type] = score

        # Retornar el tipo con mayor puntuaci√≥n
        if type_scores:
            return max(type_scores.items(), key=lambda x: x[1])[0]

        return 'general'

    def _extract_technical_concepts(self, query: str) -> List[str]:
        """Extraer conceptos t√©cnicos espec√≠ficos de la consulta."""
        concepts = []
        query_lower = query.lower()

        # Conceptos de GeneXus
        gx_concepts = [
            'for each', 'transaction', 'web panel', 'procedure', 'data provider',
            'business component', 'sdt', 'variable', 'attribute', 'table',
            'index', 'foreign key', 'generator', 'pattern', 'theme'
        ]

        # Conceptos de Bantotal
        bantotal_concepts = [
            'pr√©stamo', 'cuenta corriente', 'ahorro', 'tarjeta', 'cliente',
            'sucursal', 'moneda', 'tasa', 'garant√≠a', 'amortizaci√≥n',
            'contabilidad', 'balance', 'movimiento', 'transacci√≥n bancaria'
        ]

        # Conceptos t√©cnicos generales
        tech_concepts = [
            'instalaci√≥n', 'configuraci√≥n', 'base de datos', 'servidor',
            'deployment', 'performance', 'optimizaci√≥n', 'backup',
            'seguridad', 'usuario', 'permisos', 'api', 'web service'
        ]

        all_concepts = gx_concepts + bantotal_concepts + tech_concepts

        for concept in all_concepts:
            if concept in query_lower:
                concepts.append(concept)

        return concepts

    def _retrieve_documentation_context(self, query: str) -> List[Dict[str, Any]]:
        """Recuperar contexto espec√≠fico de documentaci√≥n."""
        try:
            # Inicializar ChromaDB si es necesario
            initialize_chroma_client()

            # Detectar tipo de documentaci√≥n
            doc_type = self._detect_documentation_type(query)
            logger.info(f"üìã Tipo de documentaci√≥n: {doc_type}")

            # Extraer conceptos t√©cnicos
            concepts = self._extract_technical_concepts(query)

            # Construir t√©rminos de b√∫squeda
            search_terms = [query]

            # Agregar conceptos espec√≠ficos
            for concept in concepts:
                search_terms.append(concept)

            # Agregar t√©rminos por tipo de documentaci√≥n
            if doc_type in self.doc_types:
                search_terms.extend(self.doc_types[doc_type][:3])  # Top 3 keywords

            # Buscar documentos excluyendo estructuras de BD
            all_results = []
            for term in search_terms[:5]:  # Limitar b√∫squedas
                try:
                    results = search_index(
                        query=term,
                        top_k=TOP_K_RESULTS,
                        filter_metadata=None  # Sin filtros para evitar errores de ChromaDB
                    )
                    all_results.extend(results)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error buscando '{term}': {e}")

            # Si no hay resultados espec√≠ficos, buscar en general
            if not all_results:
                try:
                    results = search_index(query=query, top_k=TOP_K_RESULTS * 2)
                    all_results.extend(results)
                except Exception as e:
                    logger.error(f"‚ùå Error en b√∫squeda general: {e}")

            # Filtrar manualmente para excluir estructuras de BD
            if all_results:
                filtered_results = []
                for result in all_results:
                    metadata = result.get('metadata', {})
                    source_type = metadata.get('source_type', '')

                    # Excluir documentos de estructura de BD
                    if source_type not in ['database_table', 'database_schema', 'database']:
                        filtered_results.append(result)

                all_results = filtered_results

            # Filtrar y deduplicar
            unique_results = []
            seen_ids = set()
            for result in all_results:
                if result.get('id') not in seen_ids and result.get('similarity', 0) >= MIN_SIMILARITY:
                    seen_ids.add(result.get('id'))
                    unique_results.append(result)

            # Ordenar por similitud y filtrar por tipo de fuente
            unique_results.sort(key=lambda x: x.get('similarity', 0), reverse=True)

            logger.info(f"üìö Recuperados {len(unique_results)} documentos relevantes")
            return unique_results[:TOP_K_RESULTS]

        except Exception as e:
            logger.error(f"‚ùå Error en recuperaci√≥n de documentos: {e}")
            return []

    def _build_documentation_context(self, documents: List[Dict[str, Any]], query: str, doc_type: str) -> str:
        """Construir contexto especializado para consultas de documentaci√≥n."""
        if not documents:
            return "No se encontraron documentos t√©cnicos relevantes."

        context_parts = [
            f"=== DOCUMENTACI√ìN {doc_type.upper()} RELEVANTE ===\n"
        ]

        # Agrupar documentos por tipo de fuente
        files_docs = [d for d in documents if d.get('metadata', {}).get('source_type') == 'file']
        web_docs = [d for d in documents if d.get('metadata', {}).get('source_type') == 'web']

        if files_docs:
            context_parts.append("üìÑ DOCUMENTOS LOCALES:\n")
            for i, doc in enumerate(files_docs, 1):
                metadata = doc.get('metadata', {})
                filename = metadata.get('filename', 'Archivo desconocido')
                similarity = doc.get('similarity', 0)

                doc_info = f"\n--- DOCUMENTO {i}: {filename} ---"
                doc_info += f"\nRelevancia: {similarity:.3f}"
                doc_info += f"\nContenido:\n{doc.get('text', '')[:800]}..."

                context_parts.append(doc_info)

        if web_docs:
            context_parts.append("\nüåê RECURSOS WEB:\n")
            for i, doc in enumerate(web_docs, 1):
                metadata = doc.get('metadata', {})
                source = metadata.get('source', 'URL desconocida')
                similarity = doc.get('similarity', 0)

                doc_info = f"\n--- RECURSO WEB {i} ---"
                doc_info += f"\nFuente: {source}"
                doc_info += f"\nRelevancia: {similarity:.3f}"
                doc_info += f"\nContenido:\n{doc.get('text', '')[:800]}..."

                context_parts.append(doc_info)

        context_parts.append(f"\n{'=' * 60}\n")
        return "".join(context_parts)

    def _generate_documentation_prompt(self, query: str, context: str, doc_type: str) -> str:
        """Generar prompt especializado para consultas de documentaci√≥n."""

        type_instructions = {
            'genexus': """
Eres un experto en GeneXus con a√±os de experiencia en desarrollo.
Enf√≥cate en:
- Sintaxis exacta de comandos y objetos
- Best practices de desarrollo
- Patrones de dise√±o recomendados
- Configuraciones espec√≠ficas
- Soluci√≥n de problemas comunes
""",
            'bantotal': """
Eres un especialista en sistemas bancarios Bantotal.
Enf√≥cate en:
- Procesos bancarios y financieros
- Configuraci√≥n de productos
- Procedimientos operativos
- Integraciones t√≠picas
- Manejo de clientes y cuentas
""",
            'technical': """
Eres un arquitecto de software especializado en sistemas empresariales.
Enf√≥cate en:
- Configuraciones de sistema
- Arquitectura y deployment
- Optimizaci√≥n de rendimiento
- Seguridad y mejores pr√°cticas
- Troubleshooting t√©cnico
""",
            'procedure': """
Eres un documentalista t√©cnico experto en crear gu√≠as claras.
Enf√≥cate en:
- Pasos detallados y ordenados
- Prerequisitos y consideraciones
- Ejemplos pr√°cticos
- Posibles problemas y soluciones
- Verificaci√≥n de resultados
"""
        }

        instruction = type_instructions.get(doc_type, """
Eres un consultor t√©cnico especializado en sistemas empresariales.
Proporciona informaci√≥n precisa y pr√°ctica basada en la documentaci√≥n.
""")

        base_prompt = f"""{instruction.strip()}

INSTRUCCIONES ESPEC√çFICAS:
1. Responder √öNICAMENTE bas√°ndote en la documentaci√≥n proporcionada
2. Si la informaci√≥n no est√° disponible, indicarlo claramente
3. Proporcionar ejemplos pr√°cticos cuando sea posible
4. Explicar en t√©rminos claros pero t√©cnicamente precisos
5. Incluir advertencias o consideraciones importantes
6. Citar las fuentes cuando sea relevante

DOCUMENTACI√ìN DISPONIBLE:
{context}

CONSULTA DEL USUARIO: {query}

RESPUESTA ESPECIALIZADA:"""

        return base_prompt

    def query_documentation(self, user_query: str) -> Dict[str, Any]:
        """Procesar consulta sobre documentaci√≥n t√©cnica."""
        start_time = time.time()
        self.session_stats['doc_queries_processed'] += 1

        logger.info(f"üìö Consultando documentaci√≥n: '{user_query}'")

        # Detectar tipo de documentaci√≥n
        doc_type = self._detect_documentation_type(user_query)
        logger.info(f"üìã Tipo detectado: {doc_type}")

        # Actualizar estad√≠sticas por tipo
        stat_key = f"{doc_type}_queries"
        if stat_key in self.session_stats:
            self.session_stats[stat_key] += 1

        # Recuperar contexto de documentaci√≥n
        documents = self._retrieve_documentation_context(user_query)

        if not documents:
            return {
                'query': user_query,
                'answer': None,
                'doc_type': doc_type,
                'error': "No se encontr√≥ documentaci√≥n relevante para tu consulta",
                'suggestions': [
                    "Intenta usar t√©rminos m√°s espec√≠ficos",
                    "Verifica que hay documentos indexados del tema",
                    "Especifica si buscas info de GeneXus o Bantotal",
                    "Pregunta sobre procedimientos o configuraciones espec√≠ficas"
                ],
                'metadata': {
                    'success': False,
                    'total_time': time.time() - start_time
                }
            }

        # Construir contexto especializado
        context = self._build_documentation_context(documents, user_query, doc_type)

        # Generar respuesta
        if self.has_ollama:
            doc_result = self._generate_answer_with_ai(user_query, context, doc_type)
        else:
            doc_result = self._generate_answer_fallback(user_query, context, doc_type)

        # Resultado final
        total_time = time.time() - start_time

        result = {
            'query': user_query,
            'answer': doc_result['answer'],
            'doc_type': doc_type,
            'concepts_found': self._extract_technical_concepts(user_query),
            'recommendations': doc_result.get('recommendations', []),
            'related_topics': doc_result.get('related_topics', []),
            'sources': [
                {
                    'source': doc['metadata'].get('source', ''),
                    'type': doc['metadata'].get('source_type', ''),
                    'filename': doc['metadata'].get('filename', ''),
                    'similarity': doc.get('similarity', 0),
                    'excerpt': doc.get('text', '')[:200] + "..." if len(doc.get('text', '')) > 200 else doc.get('text',
                                                                                                                '')
                }
                for doc in documents
            ],
            'metadata': {
                'documentation_type': doc_type,
                'documents_found': len(documents),
                'total_time': total_time,
                'has_ai': self.has_ollama,
                'timestamp': datetime.now().isoformat(),
                'success': doc_result['answer'] is not None
            }
        }

        if result['metadata']['success']:
            self.session_stats['successful_responses'] += 1
        else:
            self.session_stats['failed_responses'] += 1

        logger.info(f"‚úÖ Respuesta documentaci√≥n generada ({total_time:.2f}s)")
        return result

    def _generate_answer_with_ai(self, query: str, context: str, doc_type: str) -> Dict[str, Any]:
        """Generar respuesta usando IA (Ollama)."""
        try:
            prompt = self._generate_documentation_prompt(query, context, doc_type)

            response = requests.post(
                f"{self.ollama_url}/api/generate",
                json={
                    "model": self.model_name,
                    "prompt": prompt,
                    "stream": False,
                    "options": {
                        "temperature": 0.3,  # Moderadamente creativo pero preciso
                        "top_p": 0.9,
                        "max_tokens": 2000
                    }
                },
                timeout=90
            )

            if response.status_code == 200:
                result = response.json()
                answer_text = result.get('response', '').strip()

                # Extraer recomendaciones y temas relacionados
                recommendations = self._extract_recommendations_from_answer(answer_text)
                related_topics = self._extract_related_topics_from_answer(answer_text, doc_type)

                return {
                    'answer': answer_text,
                    'recommendations': recommendations,
                    'related_topics': related_topics
                }
            else:
                logger.error(f"‚ùå Error Ollama: {response.status_code}")
                return self._generate_answer_fallback(query, context, doc_type)

        except Exception as e:
            logger.error(f"‚ùå Error generando respuesta con IA: {e}")
            return self._generate_answer_fallback(query, context, doc_type)

    def _generate_answer_fallback(self, query: str, context: str, doc_type: str) -> Dict[str, Any]:
        """Generar respuesta sin IA usando extracci√≥n de informaci√≥n."""

        # Extraer informaci√≥n relevante del contexto
        answer_parts = []

        # Agregar introducci√≥n basada en el tipo
        type_intros = {
            'genexus': '## üîß Informaci√≥n sobre GeneXus\n\n',
            'bantotal': '## üè¶ Informaci√≥n sobre Bantotal\n\n',
            'technical': '## ‚öôÔ∏è Informaci√≥n T√©cnica\n\n',
            'procedure': '## üìã Procedimiento\n\n'
        }

        answer_parts.append(type_intros.get(doc_type, '## üìö Informaci√≥n Encontrada\n\n'))

        # Extraer informaci√≥n clave de los documentos
        if "DOCUMENTO 1" in context or "RECURSO WEB 1" in context:
            # Procesar documentos individuales
            docs_sections = re.split(r'--- (DOCUMENTO|RECURSO WEB) \d+', context)

            for i, section in enumerate(docs_sections[1:], 1):
                if '---' in section:
                    lines = section.split('\n')
                    content_started = False
                    relevant_content = []

                    for line in lines:
                        if 'Contenido:' in line:
                            content_started = True
                            continue

                        if content_started and line.strip():
                            relevant_content.append(line.strip())
                            if len(relevant_content) >= 5:  # Limitar extracto
                                break

                    if relevant_content:
                        answer_parts.append(f"### üìÑ Fuente {i}\n")
                        answer_parts.append('\n'.join(relevant_content[:3]))
                        answer_parts.append('\n\n')

        # Agregar informaci√≥n de contexto general si no hay documentos espec√≠ficos
        if len(answer_parts) == 1:  # Solo el header
            answer_parts.append("Bas√°ndome en la documentaci√≥n disponible:\n\n")

            # Extraer primeras l√≠neas relevantes del contexto
            context_lines = context.split('\n')
            relevant_lines = []

            for line in context_lines:
                if len(line.strip()) > 20 and not line.startswith('---') and 'Relevancia:' not in line:
                    relevant_lines.append(line.strip())
                    if len(relevant_lines) >= 8:
                        break

            if relevant_lines:
                answer_parts.extend(relevant_lines[:5])
                answer_parts.append('\n\n')

        # Agregar recomendaciones gen√©ricas
        recommendations = []
        related_topics = []

        if doc_type == 'genexus':
            recommendations = [
                "Consultar la documentaci√≥n oficial de GeneXus",
                "Revisar ejemplos en GeneXus Training",
                "Verificar la versi√≥n espec√≠fica que est√°s usando"
            ]
            related_topics = ["Patterns", "Business Components", "Web Panels", "Procedures"]

        elif doc_type == 'bantotal':
            recommendations = [
                "Verificar configuraci√≥n del m√≥dulo espec√≠fico",
                "Consultar manual de operaciones",
                "Revisar con el administrador del sistema"
            ]
            related_topics = ["Clientes", "Productos", "Contabilidad", "Reportes"]

        else:
            recommendations = [
                "Revisar documentaci√≥n t√©cnica espec√≠fica",
                "Consultar con el equipo t√©cnico",
                "Verificar configuraciones del sistema"
            ]

        # Finalizar respuesta
        answer_parts.append("\n---\n")
        answer_parts.append(
            "üí° **Nota:** Esta respuesta se basa en b√∫squeda de documentos t√©cnicos sin procesamiento de IA avanzado.")

        return {
            'answer': ''.join(answer_parts),
            'recommendations': recommendations,
            'related_topics': related_topics
        }

    def _extract_recommendations_from_answer(self, answer: str) -> List[str]:
        """Extraer recomendaciones del texto de respuesta."""
        recommendations = []

        # Buscar patrones de recomendaciones
        rec_patterns = [
            r'Recomendaci√≥n:? (.+)',
            r'Se recomienda (.+)',
            r'Es recomendable (.+)',
            r'Deber√≠as (.+)',
            r'Te sugiero (.+)'
        ]

        for pattern in rec_patterns:
            matches = re.findall(pattern, answer, re.IGNORECASE)
            recommendations.extend(matches)

        # Limpiar y limitar
        clean_recs = []
        for rec in recommendations:
            clean_rec = rec.strip().rstrip('.')
            if len(clean_rec) > 10 and clean_rec not in clean_recs:
                clean_recs.append(clean_rec)

        return clean_recs[:3]  # M√°ximo 3 recomendaciones

    def _extract_related_topics_from_answer(self, answer: str, doc_type: str) -> List[str]:
        """Extraer temas relacionados del contexto y tipo de documentaci√≥n."""
        related_topics = []
        answer_lower = answer.lower()

        # Temas por tipo de documentaci√≥n
        topic_keywords = {
            'genexus': {
                'development': ['transaction', 'web panel', 'procedure', 'business component'],
                'data': ['sdt', 'variable', 'attribute', 'table', 'index'],
                'patterns': ['work with', 'transaction', 'pattern', 'template'],
                'deployment': ['deployment', 'generator', 'environment', 'build']
            },
            'bantotal': {
                'clients': ['cliente', 'persona', 'empresa', 'tercero'],
                'products': ['producto', 'cuenta', 'pr√©stamo', 'dep√≥sito'],
                'operations': ['transacci√≥n', 'movimiento', 'operaci√≥n', 'proceso'],
                'configuration': ['parametrizaci√≥n', 'configuraci√≥n', 'setup', 'm√≥dulo']
            },
            'technical': {
                'installation': ['instalaci√≥n', 'setup', 'configuraci√≥n', 'deployment'],
                'performance': ['performance', 'optimizaci√≥n', 'tuning', 'monitoring'],
                'security': ['seguridad', 'permisos', 'autenticaci√≥n', 'autorizaci√≥n'],
                'integration': ['integraci√≥n', 'api', 'web service', 'interface']
            }
        }

        # Buscar temas mencionados en la respuesta
        if doc_type in topic_keywords:
            for category, keywords in topic_keywords[doc_type].items():
                for keyword in keywords:
                    if keyword in answer_lower:
                        related_topics.append(category.title())
                        break  # Solo agregar la categor√≠a una vez

        # Agregar temas espec√≠ficos encontrados
        specific_topics = []
        for line in answer.split('\n'):
            if any(word in line.lower() for word in ['ver tambi√©n', 'relacionado', 'consultar']):
                # Extraer temas mencionados
                words = line.split()
                for word in words:
                    if len(word) > 4 and word.isalpha():
                        specific_topics.append(word.title())

        related_topics.extend(specific_topics[:3])

        return list(set(related_topics))[:5]  # M√°ximo 5 temas √∫nicos

    def get_session_stats(self) -> Dict[str, Any]:
        """Obtener estad√≠sticas de la sesi√≥n de documentaci√≥n."""
        total_queries = self.session_stats['doc_queries_processed']

        return {
            **self.session_stats,
            'success_rate': (
                    self.session_stats['successful_responses'] / max(1, total_queries)
            ),
            'most_used_doc_type': max(
                ['genexus', 'bantotal', 'technical', 'procedure'],
                key=lambda doc_type: self.session_stats.get(f'{doc_type}_queries', 0)
            ),
            'avg_documents_per_query': sum([
                self.session_stats.get(f'{t}_queries', 0)
                for t in ['genexus', 'bantotal', 'technical', 'procedure']
            ]) / max(1, total_queries)
        }


def main():
    """Funci√≥n principal para pruebas desde l√≠nea de comandos."""
    import sys

    if len(sys.argv) < 2:
        print("""
üìö Agente de Documentos Especializado - Consultas T√©cnicas

Uso:
  python src/docs_agent.py "tu consulta sobre documentaci√≥n"

Ejemplos para GeneXus:
  python src/docs_agent.py "c√≥mo usar FOR EACH en GeneXus"
  python src/docs_agent.py "crear Web Panel con filtros"
  python src/docs_agent.py "sintaxis de procedimientos"

Ejemplos para Bantotal:
  python src/docs_agent.py "proceso de creaci√≥n de clientes"
  python src/docs_agent.py "configurar productos bancarios"
  python src/docs_agent.py "manejo de garant√≠as"

Ejemplos T√©cnicos:
  python src/docs_agent.py "instalaci√≥n de GeneXus"
  python src/docs_agent.py "configurar base de datos"
  python src/docs_agent.py "optimizar rendimiento"

Ejemplos de Procedimientos:
  python src/docs_agent.py "pasos para deployment"
  python src/docs_agent.py "tutorial de configuraci√≥n"
  python src/docs_agent.py "gu√≠a de troubleshooting"

Capacidades:
  ‚úÖ Consulta manuales y documentaci√≥n t√©cnica
  ‚úÖ Detecta autom√°ticamente el tipo de documentaci√≥n
  ‚úÖ Proporciona respuestas contextualizadas
  ‚úÖ Incluye recomendaciones y temas relacionados
  ‚úÖ Cita fuentes espec√≠ficas de documentos
""")
        return

    query = ' '.join(sys.argv[1:])

    try:
        # Crear agente de documentos
        agent = DocsAgent()

        # Procesar consulta
        result = agent.query_documentation(query)

        # Mostrar resultado
        print(f"\nüìö CONSULTA: {result['query']}")
        print(f"üìã TIPO DE DOCUMENTACI√ìN: {result['doc_type'].title()}")

        if result.get('concepts_found'):
            print(f"üîç CONCEPTOS ENCONTRADOS: {', '.join(result['concepts_found'])}")

        if result['answer']:
            print(f"\nüìñ RESPUESTA:")
            print("=" * 80)
            print(result['answer'])
            print("=" * 80)

            if result.get('recommendations'):
                print(f"\nüí° RECOMENDACIONES:")
                for i, rec in enumerate(result['recommendations'], 1):
                    print(f"   {i}. {rec}")

            if result.get('related_topics'):
                print(f"\nüîó TEMAS RELACIONADOS:")
                print(f"   {', '.join(result['related_topics'])}")
        else:
            print(f"\n‚ùå ERROR: {result.get('error', 'No se pudo generar respuesta')}")

            if result.get('suggestions'):
                print(f"\nüí° SUGERENCIAS:")
                for suggestion in result['suggestions']:
                    print(f"   ‚Ä¢ {suggestion}")

        if result.get('sources'):
            print(f"\nüìö FUENTES CONSULTADAS:")
            for i, source in enumerate(result['sources'], 1):
                if source.get('filename'):
                    source_name = source['filename']
                else:
                    source_name = Path(source.get('source', '')).name or 'N/A'

                print(f"   {i}. {source_name}")
                print(f"      Tipo: {source.get('type', 'N/A')}")
                print(f"      Similitud: {source.get('similarity', 0):.3f}")
                if source.get('excerpt'):
                    print(f"      Extracto: {source['excerpt'][:100]}...")
                print()

        # Estad√≠sticas
        metadata = result['metadata']
        print(f"üìä ESTAD√çSTICAS:")
        print(f"   Tiempo: {metadata['total_time']:.2f}s")
        print(f"   Documentos encontrados: {metadata['documents_found']}")
        print(f"   IA disponible: {'S√≠' if metadata['has_ai'] else 'No'}")

        # Estad√≠sticas de sesi√≥n
        stats = agent.get_session_stats()
        print(f"   Consultas en sesi√≥n: {stats['doc_queries_processed']}")
        print(f"   Tipo m√°s consultado: {stats['most_used_doc_type'].title()}")
        print(f"   Tasa de √©xito: {stats['success_rate']:.1%}")

    except Exception as e:
        logger.error(f"‚ùå Error: {e}")
        print(f"\n‚ùå Error procesando consulta: {e}")


if __name__ == '__main__':
    main()