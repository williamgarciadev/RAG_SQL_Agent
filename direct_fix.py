# direct_fix.py - Correcci√≥n directa y espec√≠fica del error sys

from pathlib import Path
import re

def fix_sys_error_direct():
    """Corregir el error sys de forma directa en la l√≠nea espec√≠fica"""
    
    ingestion_file = Path('src/ingestion.py')
    
    if not ingestion_file.exists():
        print("‚ùå src/ingestion.py no encontrado")
        return False
    
    print("üîß Aplicando correcci√≥n directa en l√≠nea 243...")
    
    # Leer contenido
    content = ingestion_file.read_text(encoding='utf-8')
    
    # Crear backup
    backup_file = ingestion_file.with_suffix('.py.backup2')
    backup_file.write_text(content, encoding='utf-8')
    print(f"üìã Backup creado: {backup_file}")
    
    # M√©todo 1: Agregar import sys justo despu√©s de los imports principales
    lines = content.split('\n')
    new_lines = []
    sys_added = False
    
    for i, line in enumerate(lines):
        new_lines.append(line)
        
        # Agregar import sys despu√©s de la l√≠nea que importa datetime
        if 'from datetime import datetime' in line and not sys_added:
            new_lines.append('import sys')
            sys_added = True
            print("‚úÖ import sys agregado despu√©s de datetime import")
    
    if not sys_added:
        # M√©todo 2: Buscar el lugar espec√≠fico donde est√° el error
        for i, line in enumerate(lines):
            if 'from langchain_text_splitters import CharacterTextSplitter' in line:
                lines.insert(i, 'import sys')
                new_lines = lines
                sys_added = True
                print("‚úÖ import sys agregado antes de langchain import")
                break
    
    if not sys_added:
        # M√©todo 3: Agregar al inicio despu√©s de los comentarios del docstring
        for i, line in enumerate(lines):
            if line.startswith('from pathlib import Path'):
                lines.insert(i, 'import sys')
                new_lines = lines
                sys_added = True
                print("‚úÖ import sys agregado al inicio")
                break
    
    if sys_added:
        # Escribir archivo corregido
        new_content = '\n'.join(new_lines)
        ingestion_file.write_text(new_content, encoding='utf-8')
        print("‚úÖ Archivo ingestion.py actualizado")
        return True
    else:
        print("‚ùå No se pudo agregar import sys")
        return False

def verify_sys_import():
    """Verificar que import sys est√© presente y funcional"""
    print("\nüîç Verificando import sys...")
    
    ingestion_file = Path('src/ingestion.py')
    content = ingestion_file.read_text(encoding='utf-8')
    
    # Buscar todas las l√≠neas que contienen import sys
    lines = content.split('\n')
    sys_imports = []
    
    for i, line in enumerate(lines, 1):
        if 'import sys' in line and not line.strip().startswith('#'):
            sys_imports.append((i, line.strip()))
    
    if sys_imports:
        print(f"‚úÖ Encontrados {len(sys_imports)} import sys:")
        for line_num, line in sys_imports:
            print(f"   L√≠nea {line_num}: {line}")
    else:
        print("‚ùå No se encontr√≥ import sys")
        return False
    
    # Verificar que sys est√© disponible en la l√≠nea problem√°tica
    problematic_line = None
    for i, line in enumerate(lines, 1):
        if "'ingestion_loaders' in sys.modules" in line:
            problematic_line = (i, line.strip())
            break
    
    if problematic_line:
        line_num, line = problematic_line
        print(f"üìç L√≠nea problem√°tica {line_num}: {line[:80]}...")
    
    return True

def test_import_directly():
    """Probar importar el m√≥dulo directamente"""
    print("\nüß™ Probando importaci√≥n directa...")
    
    try:
        import sys
        sys.path.insert(0, 'src')
        
        # Forzar recarga del m√≥dulo
        if 'ingestion' in sys.modules:
            del sys.modules['ingestion']
        
        # Importar y probar funci√≥n espec√≠fica
        from ingestion import _load_all_docs
        print("‚úÖ _load_all_docs se importa correctamente")
        
        # Probar la funci√≥n problem√°tica
        docs_path = Path('docs')
        result = _load_all_docs(docs_path, include_urls=False, include_sql=False)
        print(f"‚úÖ _load_all_docs funciona: {len(result)} documentos cargados")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en importaci√≥n directa: {e}")
        import traceback
        traceback.print_exc()
        return False

def alternative_fix():
    """Aplicar fix alternativo modificando la l√≠nea problem√°tica"""
    print("\nüîß Aplicando fix alternativo...")
    
    ingestion_file = Path('src/ingestion.py')
    content = ingestion_file.read_text(encoding='utf-8')
    
    # Reemplazar la l√≠nea problem√°tica con una versi√≥n que no use sys.modules
    old_pattern = r"'\.pdf': _load_pdf if 'ingestion_loaders' in sys\.modules else lambda x: '',"
    new_replacement = "'.pdf': lambda x: '',  # Simplificado - sin ingestion_loaders"
    
    if 'sys.modules' in content:
        # Crear backup
        backup_file = ingestion_file.with_suffix('.py.backup3')
        backup_file.write_text(content, encoding='utf-8')
        
        # Reemplazar todas las referencias problem√°ticas
        new_content = content.replace(
            "'ingestion_loaders' in sys.modules",
            "False  # Simplificado - m√≥dulos auxiliares deshabilitados"
        )
        
        ingestion_file.write_text(new_content, encoding='utf-8')
        print("‚úÖ Referencias a sys.modules reemplazadas")
        return True
    else:
        print("‚ÑπÔ∏è No se encontraron referencias a sys.modules")
        return False

def main():
    """Ejecutar correcci√≥n directa"""
    print("üîß CORRECCI√ìN DIRECTA DEL ERROR SYS")
    print("=" * 40)
    
    # 1. Aplicar correcci√≥n directa
    step1 = fix_sys_error_direct()
    
    # 2. Verificar que se aplic√≥
    step2 = verify_sys_import()
    
    # 3. Probar importaci√≥n
    step3 = test_import_directly()
    
    # 4. Si falla, aplicar fix alternativo
    if not step3:
        print("\nüîÑ Aplicando m√©todo alternativo...")
        step4 = alternative_fix()
        
        if step4:
            # Probar de nuevo
            step3 = test_import_directly()
    
    print(f"\nüìä RESULTADO:")
    print(f"   Correcci√≥n aplicada: {'‚úÖ' if step1 else '‚ùå'}")
    print(f"   Import sys verificado: {'‚úÖ' if step2 else '‚ùå'}")
    print(f"   Funci√≥n importable: {'‚úÖ' if step3 else '‚ùå'}")
    
    if step3:
        print(f"\nüéâ ¬°Problema solucionado!")
        print(f"üí° Pr√≥ximo paso:")
        print(f"   python src/indexer.py --force")
    else:
        print(f"\n‚ö†Ô∏è A√∫n hay problemas")
        print(f"üí° Revisar manualmente src/ingestion.py l√≠nea 243")

if __name__ == "__main__":
    main()